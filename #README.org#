#+OPTIONS: ^:{}
#+STARTUP: indent nolineimages
#+TITLE: irnb(i ruby note book) or org ruby note book
#+AUTHOR: 西谷滋人 2018-19
#+EMAIL:     (concat "nishitani@kwansei.ac.jp")
#+LANGUAGE:  jp
#+OPTIONS:   H:4 toc:t num:2

#  +SETUPFILE: /Users/bob/Github/ornb/lib/theme-readtheorg.setup

* Irnb
ipynbみたいにnotebookをorg+rubyで容易に作成できるsystem

org_ruby_general_note_bookなんて名前がいいかな．

* background
** 知識はツリー構造でない
文書作成は規模の小さいうちはいいが大きくなるにつれて破綻する．
それは，毎週のレポートでもそうだし，さらに学期末試験や卒業論文に
なったら悲惨．

それらをうまく乗り越えるには，小さい時と大きくなった時で，
文書やdirectoryが相似形になっているフラクタル構造が理想的．
そうすれば規模が大きくなっても対応できるという安心感があるから．
どのような粒度の知識であろうと，学習の最初から構造化されたノートを
提供しようというのがirnbの理想．そしてstageの進化をsupportしてくれる．．．

gemspecは面白い役割を持ったfileかも．
規模が大きくなって下に増やしていく時にはperspectiveがわかりやすいが，
上に付け足す，あるいは下に入る時にはそれらを統括する箇所，
本でいうところの章の概要みたいなものかな．．．
でもそれはREADME.orgだな．．．
上へのlinkはdirectoryで管理できないから．

末枝と主枝だけは違う構造だな．
だって，main branchのREADME.orgはtocだろうし，
末枝はfirst stage的構造だろうから．

** 問題がセミラティスで解決する？
アレクサンダーのセミラティスはいいアイデアかもしれないが，それが
今感じているfileシステムの引っかかりの本質ではなさそう．
上で述べている逆アクセスは本質かもしれないが.

[[/Users/bob/Desktop/phys_com_r10]] でtree -L 1表示をorgに取り込んだが，
修正するとともに自動更新する方法ないかな．

- リンク切れなんだけど，そいつに入れるか．
- なら，リンクを自動生成するようにするか．

- orgに

#+begin_example tree
** ./test
- [[./test/test_helper.rb]]
- [[./test/ornb_test.rb]]
** ./bin
- [[./bin/setup]]
- [[./bin/console]]
** ./pkg
- [[./pkg/ornb-0.1.0.gem]]


- [[./CODE_OF_CONDUCT.md]]
- [[./README.aux]]
- [[./README.log]]
- [[./README.html]]
- [[./ornb.gemspec]]
- [[./Rakefile]]
- [[./README.tex]]
- [[./README.out]]
- [[./Gemfile]]
- [[./Gemfile.lock]]
- [[./README.org]]
- [[./LICENSE.txt]]

#+end_example

とかしてみよう．

: ornb tree
でcurrent dir'.'以下のdirectoryのlinkが作成される．

残念ながら，まだorg文書の自動更新まではできていない．しかし，いい感じ．

** platex
[[/Users/bob/materials_science/boundary/shiraki]]でformatの定まったpdf作成を試作．
結局platex.rakeに変更箇所を直書きしている．

- hyperrefで出るエラーを抑えるために，dvipdfmxを指定．
- pdfのしおりの文字化けを防ぐために，pxjahyperを利用．

* Installation
Add this line to your application's Gemfile:

#+BEGIN_SRC ruby
    gem 'irnb'
#+END_SRC

And then execute:

#+BEGIN_EXAMPLE
    $ bundle
#+END_EXAMPLE

Or install it yourself as:

#+BEGIN_EXAMPLE
    $ gem install irnb
#+END_EXAMPLE

* Usage
#+begin_example
Commands:
  ornb help [COMMAND]    # Describe available commands or one specific command
  ornb link_check [FILE] # link check on FILE(README.org)
  ornb readme            # make initial README.org
#+end_example
** readme
デフォルトのREADME.orgを作る
** link_check
FILE(デフォルトはREADME.org)のlink切れをチェック．切れている時には配下のdirectoryから候補を提示．
- \[[file][name]\]には対応
- \[[#own_item]\]にも対応

* Development
** 基本コンセプト
*** rubyとpythonは違うよね．
rubyの世界に住んでいて，pythonを始めるとその文化の違いに驚く
|-----------------------------------------------+---------------------------------------|
| ruby                                          | python                                |
|-----------------------------------------------+---------------------------------------|
| classにする，testを描く                       | classを呼んで，reportを書く           |
| classはsystemを作るための環境                 | classは一群の計算のまとまり           |
| 色々な振る舞いをするclassを寄せ集めてcontroll | 単純な作業を繰り返すclassを別々に使う |
| thor, gem, bundler, rake                      | notebook, numpy, matplotlib           |
|-----------------------------------------------+---------------------------------------|

で，どっちがいいというのではないが，
: rubyにもpython的な文化を取り入れることが可能か
という視点でsystemあるいはgemを試作してみる．

提供したいのは，jupyter notebookみたいなreport作成環境をrubyの文化で提供すること．
今のところのアイデアは，
- 文章はorgで
- 計算はrubyで
- コマンドはrakeで
- plotはgnuplotで
scaffoldを提供する予定．
** command line appliにしてしまう，softwareを作るというより，systemを作るという視点．
- Github, Github edu...
- ruby, gems, OSS gate(pull request)

** gnuplot
rubyのgnuplotを使うのは，データの加工から表示までを一気にしたいから．
それができるとデータとその管理の一元化が可能となる．
ところが，
- 同じデータから違うプロットを作ったり，
- 同じプロットを違うデータで作ったり，
- 近似曲線を変えて見たりという
試行錯誤がデータの整理では必要になる．
これらの作業を効率的におこなうシステムがあると便利だよね．
Mapleは一部それができている．試行錯誤のところが．．．
でも，編集の不自由さによって，あまり効率が良くない．
惜しいな．Maple... 本当に．

data plotの視点は，
- 変わるところと変わらないところ
  - mapleっぽくしていく．．．
なんだろうが，
- commandにするか設定(gnuplot tmp.gplも含めて)にするかrakeにするか?
- classかDSLか？
自然な記述になるのはどっちだろう? あるいはそう思うのは?

** Contributing
   :PROPERTIES:
   :CUSTOM_ID: contributing
   :END:

Bug reports and pull requests are welcome on GitHub at
https://github.com/[USERNAME]/irnb. This project is intended to be a
safe, welcoming space for collaboration, and contributors are expected
to adhere to the [[http://contributor-covenant.org][Contributor
Covenant]] code of conduct.

** License
   :PROPERTIES:
   :CUSTOM_ID: license
   :END:

The gem is available as open source under the terms of the
[[https://opensource.org/licenses/MIT][MIT License]].

** Code of Conduct
   :PROPERTIES:
   :CUSTOM_ID: code-of-conduct
   :END:

Everyone interacting in the Irnb project's codebases, issue trackers,
chat rooms and mailing lists is expected to follow the
[[https://github.com/%5BUSERNAME%5D/irnb/blob/master/CODE_OF_CONDUCT.md][code
of conduct]].
